pnorm
pnorm()
pnorm
C_pnorm
qnorm
anova
interaction.plot()
interaction.plot
# Plot the error versus the group means
{plot(model.IRS2$fitted.values, model.IRS2$residuals, main = "Errors vs. Group Means",xlab = "Group Means", ylab = "Errors")
abline(h = 0,col = "dodgerblue")}
IRS1 <- read.csv("~/GitHub/BAX-400-SS2-2022/Homework/HW4/IRS 1.csv")
head(IRS1)
library(tidyr)
IRS1.long <- pivot_longer(IRS1, cols = 1:4, names_to = "Form", values_to = "Time")
IRS1.long$Form <- as.factor(IRS1.long$Form)
head(IRS1.long)
library(ggplot2)
ggplot(IRS1.long, aes(x = Form, y = Time, fill = Form)) + geom_boxplot()
# We make a model
model.IRS1 <- lm(Time ~ Form, data = IRS1.long)
model.IRS1
#QQ Plot for Normality
{qqnorm(model.IRS1$residuals)
qqline(model.IRS1$residuals)}
# Shapiro Wilks Test
shapiro.test(model.IRS1$residuals)
### Anderson Darling or Kolomogrov Smirnoff are both acceptable tests as well
# Plot the error versus the group means
{plot(model.IRS1$fitted.values, model.IRS1$residuals, main = "Errors vs. Group Means",xlab = "Group Means", ylab = "Errors")
abline(h = 0,col = "purple")}
library(car)
#Levene Test
leveneTest(model.IRS1$residuals ~ Form, data = IRS1.long, center = mean)
#Brown Forsythe Test
leveneTest(model.IRS1$residuals ~ Form, data = IRS1.long, center = median)
anova(model.IRS1)
# could also do this
summary(aov(model.IRS1))
# Checking sample sizes
table(IRS1.long$Form)
# Tukey's Honestly Significant Differences
TukeyHSD(aov(model.IRS1))
# Plot 95% Confidence Intervals
plot(TukeyHSD(aov(model.IRS1)))
IRS2 <- read.csv("~/GitHub/BAX-400-SS2-2022/Homework/HW4/IRS 2.csv")
head(IRS2)
#Transform the data frame similar fashion with tidyr
# This time we use "-1" for cols argument so that we keep tax payer id for repeated measure ANOVA
IRS2.long <- pivot_longer(IRS2, cols = -1, names_to = "Form", values_to = "Time")
# We also need to turn Taxpayer into a factor, so that R does not treat it quantitatively
IRS2.long$Taxpayer <- as.factor(IRS2.long$Taxpayer)
IRS2.long$Form <- as.factor(IRS2.long$Form)
head(IRS2.long)
# We make a model
model.IRS2 <- lm(Time ~ Form + Taxpayer, data = IRS2.long)
#model.IRS2
#Visualize Data
ggplot(IRS2.long, aes(x = Form, y = Time, fill = Form)) + geom_boxplot()
### CHECKING NORMALITY
#QQ Plot for Normality
{qqnorm(model.IRS2$residuals)
qqline(model.IRS2$residuals)}
# Shapiro Wilks Test
shapiro.test(model.IRS2$residuals)
# Let's also check Anderson Darling test
# Another way to do residuals, as the slides do
resids_IRS2 <- residuals(model.IRS2)
nortest::ad.test(resids_IRS2)
# Plot the error versus the group means
{plot(model.IRS2$fitted.values, model.IRS2$residuals, main = "Errors vs. Group Means",xlab = "Group Means", ylab = "Errors")
abline(h = 0,col = "dodgerblue")}
library(car)
#Levene Test
leveneTest(model.IRS2$residuals ~ Form, data = IRS2.long, center = median)
#Brown Forsythe Test
leveneTest(model.IRS2$residuals ~ Taxpayer, data = IRS2.long, center = median)
#Using Maulchy's
#library(rstatix)
# anovaTest <- anova_test(data = IRS2.long, dv = Time, wid = Taxpayer, within = Form)
# anovaTest
anova(model.IRS2)
aov(model.IRS2)
# get_anova_table(anovaTest)
TukeyHSD(aov(model.IRS2), which = 'Form', ordered = TRUE)
plot(TukeyHSD(aov(model.IRS2), which = 'Form', ordered = TRUE), las = 1)
IRS3 <- read.csv("~/GitHub/BAX-400-SS2-2022/Homework/HW4/IRS 3.csv")
head(IRS3)
IRS3.long <- pivot_longer(IRS3, cols = -1, names_to = "Form", values_to = "Time")
IRS3.long$Group <- as.factor(IRS3.long$Group)
IRS3.long$Form <- as.factor(IRS3.long$Form)
head(IRS3.long)
Group <- IRS3.long$Group
Form <- IRS3.long$Form
Time <- IRS3.long$Time
model_3 <- aov(Time ~ Form + Group + Form*Group)
summary(model_3)
# Create an interaction plot
interaction.plot(Form, Group, Time)
interaction.plot(Group, Form, Time)
detergents <- read.csv("~/GitHub/BAX-400-SS2-2022/Homework/HW4/detergents.csv")
head(detergents)
#Reformat data
det.long <- pivot_longer(detergents, cols = -1, names_to = "Detergents", values_to = "Score")
det.long$Temperature <- as.factor(det.long$Temperature)
det.long$Detergents <- as.factor(det.long$Detergents)
head(det.long)
Temp <- det.long$Temperature
Det <- det.long$Detergents
Score <- det.long$Score
#Checking unique values in temperature
unique(det.long$Temperature)
model.det <- aov(Score ~ Det + Temp + Det:Temp)
summary(model.det)
interaction.plot(Det, Temp, Score)
interaction.plot(Temp, Det, Score)
#Levene Test
leveneTest(model.IRS2$residuals ~ Form, data = IRS2.long, center = median)
#Levene Test
leveneTest(model.IRS1, data = IRS1.long, center = mean)
#Levene Test
leveneTest(Time ~ Form, data = IRS1.long, center = mean)
#Brown Forsythe Test
leveneTest(Time ~ Form, data = IRS1.long, center = median)
#Levene Test
leveneTest(Time ~ Form, data = IRS2.long, center = median)
#Brown Forsythe Test
leveneTest(Time ~ Taxpayer, data = IRS2.long, center = median)
qpois(0.95,20,lower.tail = FALSE)
qnorm(0.01, mean = 550,
sd = 18/sqrt(36),
lower.tail = TRUE)
power.t.test
data(iris)
iris
data("mtcars")
mtcars
?mtcars
mtcars
#Let's test for independence between number of cylinders in a car and Transmission
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- as.factor(mtcars$am)
chisq.test(cyl, tran)
#Load in some data, how about some cars?
data("mtcars")
mtcars
#What are the variables in this data?
?mtcars
#Let's test for independence between number of cylinders in a car and Transmission
cyl <- as.factor(mtcars$cyl)
tran <- as.factor(mtcars$am)
chisq.test(cyl, tran)
chisq.test(cyl, tran, simulate.p.value = TRUE)
chisq.test(cyl, tran)
table(cyl, tran)
chisq.test(cyl, tran)
ggplot() + aes(x = cyl, y = tran) + geom_point()
library(ggplot2)
library(ggplot2)
ggplot() + aes(x = cyl, y = tran) + geom_point()
ggplot() + aes(x = cyl, y = tran) + geom_scatter()
ggplot() + aes(x = cyl, y = tran) + geom_boxplot()
ggplot() + aes(x = cyl, y = tran) + geom_mosaic()
ggplot()  + geom_mosaic(aes(x = cyl, y = tran))
ggplot() + geom_mosaic(aes(x = cyl, y = tran))
ggplot(data = mtcars) + geom_mosaic(aes(x = cyl , y = am))
install.packages(ggmosaic)
install.packages("ggmosaic")
library(ggmosaic)
ggplot(data = mtcars) + geom_mosaic(aes(x = cyl , y = am))
ggplot(data = mtcars) + geom_mosaic(aes(x = cyl , fill = am))
ggplot(data = mtcars) + geom_mosaic(aes(x = product(cyl) , fill = am))
#Load in some data, how about some cars?
data("mtcars")
mtcars
#What are the variables in this data?
?mtcars
#Let's test for independence between number of cylinders in a car and Transmission
cyl <- as.factor(mtcars$cyl)
tran <- as.factor(mtcars$am)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- as.factor(mtcars$am)
table(cyl, tran)
chisq.test(cyl, tran)
library(ggplot2)
#install.packages("ggmosaic")
library(ggmosaic)
ggplot(data = mtcars) + geom_mosaic(aes(x = product(cyl) , fill = am))
library(plotly)
ggplotly(ggplot(data = mtcars) + geom_mosaic(aes(x = product(cyl) , fill = am)))
ggplotly(ggplot(data = mtcars) + geom_mosaic(aes(x = cyl , fill = am)))
chisq.test(cyl, tran)
library(ggplot2)
#install.packages("ggmosaic")
library(ggmosaic)
library(plotly)
ggplotly(ggplot(data = mtcars) + geom_mosaic(aes(x = product(cyl) , fill = am)))
library(ggplot2)
#install.packages("ggmosaic")
library(ggmosaic)
library(plotly)
#Load in some data, how about some cars?
data("mtcars")
mtcars
#What are the variables in this data?
?mtcars
#Let's test for independence between number of cylinders in a car and Transmission
cyl <- as.factor(mtcars$cyl)
tran <- as.factor(mtcars$am)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- as.factor(mtcars$am)
table(cyl, tran)
print("hello world")
library(plotly)
library(ggplot2)
library(ggmosaic)
library(plotly)
data("mtcars")
mtcars
?mtcars
mtcars
class(mtcars$cyl)
data("mtcars")
mtcars
?mtcars
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- as.factor(mtcars$am)
cyl <- as.factor(mtcars$cyl)
trans <- as.factor(mtcars$am)
table(cyl, trans)
chisq.test(cyl, trans)
ggplot(data = mtcars) + geom_mosaic(aes(x = product(cyl), fill = am))
ggplotly(ggplot(data = mtcars) + geom_mosaic(aes(x = product(cyl), fill = am)))
chi2 <- chisq.test(cyl, trans)
chi2
chi2$statistic
chi2 <- chisq.test(cyl, trans)$statistic
chi2
n
n = nrow(mtcars)
n
unique(cyl)
sum(unique(cyl))
len(cyl)
length(cyl)
length(unique(cyl))
min(3, 7)
minDim <- min(length(unique(cyl) - 1,length(unique(trans) - 1)
minDim <- min(length(unique(cyl) - 1,length(unique(trans) - 1))
minDim <- min(length(unique(cyl) - 1,length(unique(trans) - 1)))
minDim <- min(length(unique(cyl)) - 1,length(unique(trans)) - 1))
minDim <- min(length(unique(cyl)) - 1,length(unique(trans)) - 1)
minDim
V = sqrt(chi2 / (n * minDim))
V
?cramerV
chisq.test(cyl, trans)
test <- chisq.test(cyl, trans)
test$observed
test$expected
library(ggplot2)
library(plotly)
muscle <- read.table("muscle.txt")
colnames(muscle) <- c("mass", "age")
head(muscle, 10)
ggplotly(ggplot(muscle, aes(x = mass)) + geom_histogram(bins =15, fill = "#FF6347"))
ggplotly(ggplot(muscle, aes(x = age)) + geom_histogram(bins = 15, fill = "#FFA07A"))
ggplotly(ggplot(muscle, aes(x = age, y= mass)) + geom_point(color = "#FFC300"))
library(MASS)
bxcx <- boxcox(mass ~ age, data = muscle)
lambda <- bxcx$x[which.max(bxcx$y)]
lambda
#Build the model
modelMM <- lm(mass ~ age, data = muscle)
sumModelMM <- summary(modelMM)
# Coefficients and their standard errors
sumModelMM$coefficients
# MSE
MSE <- sum(sumModelMM$residuals^2) / (nrow(muscle) - 2)
MSE
# Degrees of Freedom for MSE
sumModelMM$df[2]
ggplotly(ggplot(muscle, aes(x = age, y= mass)) + geom_point(color = "#FFC300") + geom_abline(modelMM))
ggplotly(ggplot(muscle, aes(x = age, y= mass)) + geom_point(color = "#FFC300") + geom_abline())
ggplotly(ggplot(muscle, aes(x = age, y= mass)) + geom_point(color = "#FFC300") + geom_abline(intercept = 156.346564))
ggplotly(ggplot(muscle, aes(x = age, y= mass)) + geom_point(color = "#FFC300") + geom_abline(intercept = 156.346564, slope = -1.189996))
ggplotly(ggplot(muscle, aes(x = age, y= mass)) + geom_point(color = "#FFC300") + geom_abline(intercept = 156.346564, slope = -1.189996, col = "#003cff"))
ggplotly(
ggplot(muscle, aes(x = age, y = mass)) + geom_point(color = "#FFC300") + geom_abline(
intercept = 156.346564,
slope = -1.189996,
col = "#003cff"
)
)
# Fitted values for 6th and 16th value
modelMM$fitted.values[c(6,16)]
#Residuals for 6th and 16th cases
modelMM$residuals[c(6,16)]
# Fitted values for 6th and 16th value
modelMM$fitted.values[c(6,16)]
#Residuals for 6th and 16th cases
modelMM$residuals[c(6,16)]
ggplot(data = modelMM, aes(x = fitted.values, y = residuals)) + geom_point()
modelMM$fitted.values
modelMM$residuals
ggplot() + aes(x = fitted.values, y = residuals)) + geom_point()
ggplot() + aes(x = fitted.values, y = residuals) + geom_point()
ggplot() + aes(x = modelMM$fitted.values, y = modelMM$residuals) + geom_point()
ggplot() + aes(x = modelMM$fitted.values, y = modelMM$residuals) + geom_point() + labs(x = "Fitted Values", y = "Residuals") + geom_abline()
ggplot() + aes(x = modelMM$fitted.values, y = modelMM$residuals) + geom_point() + labs(x = "Fitted Values", y = "Residuals") + geom_abline()
ggplot() + aes(x = modelMM$fitted.values, y = modelMM$residuals) + geom_point() + labs(x = "Fitted Values", y = "Residuals") + geom_abline(intercept = 0, slope = 0)
geom_qq(modelMM)
qplot(sample = mass, data = muscle)
qplot(sample = mass, data = muscle) + geom_abline
qplot(sample = mass, data = muscle) + geom_abline()
ggplot(data = muscle, mapping = aes(sample = age)) + stat_qq_band() + stat_qq_line() + stat_qq_point()
ggplot(data = muscle, mapping = aes(sample = age)) + stat_qq_line() + stat_qq_point()
qqplot(modelMM)
qqnorm(modelMM)
qqnorm(muscle$age)
qqnorm(muscle$mass)
ggplot(modelMM, aes(qqnorm(.stdresid)[[1]], .stdresid)) + geom_point()
ggplot(modelMM, aes(qqnorm(.stdresid), .stdresid)) + geom_point()
ggplot(modelMM, aes(qqnorm(.stdresid)[1], .stdresid)) + geom_point()
ggplot(modelMM, aes(qqnorm(.stdresid)[[1]], .stdresid)) + geom_point()
ggplot(modelMM, aes(qqnorm(.stdresid)[[1]], .stdresid)) + geom_point() + geom_abline()
ggplot(modelMM, aes(qqnorm(.stdresid)[[1]], .stdresid)) + geom_point() + geom_abline()
ggplot() + aes(x = modelMM$fitted.values, y = modelMM$residuals) + geom_point() + labs(x = "Fitted Values", y = "Residuals") + geom_abline(intercept = 0, slope = 0)
#qplot(sample = mass, data = muscle) + geom_abline()
#qqnorm(muscle$mass)
ggplot(modelMM, aes(qqnorm(.stdresid)[[1]], .stdresid)) + geom_point() + geom_abline() + labs(x = "Theoretical Quantiles", y = "Standardized Residuals", title = "Normal Q-Q")
ggplot() + aes(x = modelMM$fitted.values, y = modelMM$residuals) + geom_point() + labs(x = "Fitted Values", y = "Residuals") + geom_abline(intercept = 0, slope = 0)
#qplot(sample = mass, data = muscle) + geom_abline()
#qqnorm(muscle$mass)
ggplotly(ggplot(modelMM, aes(qqnorm(.stdresid)[[1]], .stdresid)) + geom_point() + geom_abline() + labs(x = "Theoretical Quantiles", y = "Standardized Residuals", title = "Normal Q-Q"))
ggplot() + aes(x = modelMM$fitted.values, y = modelMM$residuals) + geom_point() + labs(x = "Fitted Values", y = "Residuals") + geom_abline(intercept = 0, slope = 0)
ggplot(modelMM, aes(qqnorm(.stdresid)[[1]], .stdresid)) + geom_point() + geom_abline() + labs(x = "Theoretical Quantiles", y = "Standardized Residuals", title = "Normal Q-Q")
ggplot() + aes(x = modelMM$fitted.values, y = modelMM$residuals) + geom_point() + labs(x = "Fitted Values", y = "Residuals") + geom_abline(intercept = 0, slope = 0)
ggplot(modelMM, aes(qqnorm(.stdresid)[[1]], .stdresid)) + geom_point() + geom_abline() + labs(x = "Theoretical Quantiles", y = "Standardized Residuals", title = "Normal Q-Q")
ggplot() + aes(x = modelMM$fitted.values, y = modelMM$residuals) + geom_point() + labs(x = "Fitted Values", y = "Residuals") + geom_abline(intercept = 0, slope = 0)
ggplot(modelMM, aes(qqnorm(.stdresid)[[1]], .stdresid)) + geom_point() + geom_abline() + labs(x = "Theoretical Quantiles", y = "Standardized Residuals", title = "Normal Q-Q")
qqnorm(.stdresid)[[1]]
modelMM.stdresid
modelMM$residuals
ggplot(muscle, aes(sample = mass)) + stat_qq() + stat_qq_line()
ggplot(muscle, aes(sample = mass)) + stat_qq() + stat_qq_line() + labs(x = "Theoretical Quantiles", y = "Standardized Residuals", title = "Normal Q-Q")
ggplot(modelMM, aes(qqnorm(.stdresid)[[1]], .stdresid)) + geom_point() + geom_abline() + labs(x = "Theoretical Quantiles", y = "Standardized Residuals", title = "Normal Q-Q")
ggplot() + aes(x = modelMM$fitted.values, y = modelMM$residuals) + geom_point() + labs(x = "Fitted Values", y = "Residuals") + geom_abline(intercept = 0, slope = 0)
ggplot(modelMM, aes(qqnorm(.stdresid)[[1]], .stdresid)) + geom_point() + geom_abline() + labs(x = "Theoretical Quantiles", y = "Standardized Residuals", title = "Normal Q-Q")
ggplot(muscle, aes(sample = mass)) + stat_qq() + stat_qq_line() + labs(x = "Theoretical Quantiles", y = "Standardized Residuals", title = "Normal Q-Q")
qqnorm(muscle$mass)
qqline(muscle$mass)
qqnorm(muscle$mass)
qqline(muscle$mass)
qqline(muscle$mass)}
{qqnorm}(muscle$mass)
qqline(muscle$mass)}
ggplot() + aes(x = modelMM$fitted.values, y = modelMM$residuals) + geom_point() + labs(x = "Fitted Values", y = "Residuals") + geom_abline(intercept = 0, slope = 0)
# ggplot(modelMM, aes(qqnorm(.stdresid)[[1]], .stdresid)) + geom_point() + geom_abline() + labs(x = "Theoretical Quantiles", y = "Standardized Residuals", title = "Normal Q-Q")
ggplot(muscle, aes(sample = mass)) + stat_qq() + stat_qq_line() + labs(x = "Theoretical Quantiles", y = "Standardized Residuals", title = "Normal Q-Q")
{qqnorm}(muscle$mass)
qqline(muscle$mass)}
{qqnorm(muscle$mass)
qqline(muscle$mass)}
ggplot() + aes(x = modelMM$fitted.values, y = modelMM$residuals) + geom_point() + labs(x = "Fitted Values", y = "Residuals") + geom_abline(intercept = 0, slope = 0)
# ggplot(modelMM, aes(qqnorm(.stdresid)[[1]], .stdresid)) + geom_point() + geom_abline() + labs(x = "Theoretical Quantiles", y = "Standardized Residuals", title = "Normal Q-Q")
ggplot(muscle, aes(sample = mass)) + stat_qq() + stat_qq_line() + labs(x = "Theoretical Quantiles", y = "Sample Quantiles", title = "Normal Q-Q")
{qqnorm(muscle$mass)
qqline(muscle$mass)}
#Errors vs Fitted Values
ggplot() + aes(x = modelMM$fitted.values, y = modelMM$residuals) + geom_point() + labs(x = "Fitted Values", y = "Residuals") + geom_abline(intercept = 0, slope = 0)
## Normal Q-Q plot
ggplot(muscle, aes(sample = mass)) + stat_qq() + stat_qq_line() + labs(x = "Theoretical Quantiles", y = "Sample Quantiles", title = "Normal Q-Q")
modelMM$coefficients
xbar <- mean(muscle$age)
sumModelMM$coefficients
sumModelMM$coefficients[1,2]
xbar <- mean(muscle$age)
c(modelMM$coefficients[1] - qt(1 - 0.01/2, nrow(muscle)-2) * sumModelMM$coefficients[1,2], modelMM$coefficients[1] + qt(1 - 0.01/2, nrow(muscle)-2) * sumModelMM$coefficients[1,2])
xbar <- mean(muscle$age)
as.numeric(c(modelMM$coefficients[1] - qt(1 - 0.01/2, nrow(muscle)-2) * sumModelMM$coefficients[1,2], modelMM$coefficients[1] + qt(1 - 0.01/2, nrow(muscle)-2) * sumModelMM$coefficients[1,2]))
xbar <- mean(muscle$age)
as.numeric(
c(
modelMM$coefficients[1] - qt(1 - 0.01 / 2, nrow(muscle) - 2) * sumModelMM$coefficients[1, 2],
modelMM$coefficients[1] + qt(1 - 0.01 / 2, nrow(muscle) - 2) * sumModelMM$coefficients[1, 2]
)
)
Tstar <- sumModelMM$coefficients[2,1] / sumModelMM$coefficients[2,2]
Tstar
Tstar <- sumModelMM$coefficients[2,1] / sumModelMM$coefficients[2,2]
Tstar
qt(0.01, nrow(muscle) - 2)
sumModelMM$coefficients
Tstar < qt(0.01, nrow(muscle) - 2)
predict(
modelMM,
newdata = data.frame(
age = 60
),
interval = "prediction",
level = 0.95
)
anova(modelMM)
sum((muscle$mass - mean(muscle$mass)^2))
sum((muscle$mass - mean(muscle$mass))^2)
anova(modelMM)
anova(modelMM)
#Proportion of total variation is measured by R^2
sumModelMM$r.squared
cor(muscle$age, muscle$mass)
#Proportion of total variation is measured by R^2
sumModelMM$r.squared
cor(muscle$age, muscle$mass)
setwd("~/GitHub/STA206/Homework/HW4")
X <- matrix(data = cbind(c(-0.63, 0.18, -0.84, 1.6, 0.33), c(-0.82, 0.49, 0.74, 0.58, -0.31)))
X
X <- matrix(data = rbind(c(-0.63, 0.18, -0.84, 1.6, 0.33), c(-0.82, 0.49, 0.74, 0.58, -0.31)))
X
rbind(c(-0.63, 0.18, -0.84, 1.6, 0.33), c(-0.82, 0.49, 0.74, 0.58, -0.31))
cbind(c(-0.63, 0.18, -0.84, 1.6, 0.33), c(-0.82, 0.49, 0.74, 0.58, -0.31))
X <- cbind(c(-0.63, 0.18, -0.84, 1.6, 0.33), c(-0.82, 0.49, 0.74, 0.58, -0.31))
X
Y
Y <- c(-0.97, 2.51, -0.19, 6.53, 1)
Y
Y <- t(c(-0.97, 2.51, -0.19, 6.53, 1))
Y
Y <- c(-0.97, 2.51, -0.19, 6.53, 1)
Y
t(X) %*% X
#X'Y
t(X) %*% Y
X <- cbind(c(-0.63, 0.18, -0.84, 1.6, 0.33), c(-0.82, 0.49, 0.74, 0.58, -0.31))
Y <- c(-0.97, 2.51, -0.19, 6.53, 1)
# X'X
t(X) %*% X
#X'Y
t(X) %*% Y
# (X'X)^-1
solve(t(X) %*% X)
B <- solve(t(X) %*% X) %*% t(X) %*% Y
B
H <- X %*% solve(t(X) %*% X) %*% t(X)
H
X <- cbind(rep(1,5), c(-0.63, 0.18, -0.84, 1.6, 0.33), c(-0.82, 0.49, 0.74, 0.58, -0.31))
View(X)
X <- cbind(rep(1,5), c(-0.63, 0.18, -0.84, 1.6, 0.33), c(-0.82, 0.49, 0.74, 0.58, -0.31))
Y <- c(-0.97, 2.51, -0.19, 6.53, 1)
# X'X
t(X) %*% X
#X'Y
t(X) %*% Y
# (X'X)^-1
solve(t(X) %*% X)
B <- solve(t(X) %*% X) %*% t(X) %*% Y
B
H <- X %*% solve(t(X) %*% X) %*% t(X)
H
H <- X %*% solve(t(X) %*% X) %*% t(X)
H
sum(diag(H))
Yhat <- X %*% B
Yhat
# Residuals
e <- Y - Yhat
e
sum(e)
#SSE
SSE <- sum((Y - Yhat)^2)
SSE
# Fitted values
Yhat <- X %*% B
Yhat
# Residuals
e <- Y - Yhat
e
#SSE
SSE <- sum((Y - Yhat)^2)
SSE
# MSE
MSE <- SSE / (5 - 3)
MSE
Xint
Xint <- cbind(X, X[,2] * X[,3])
Xint
Xint <- cbind(X, X[,2] * X[,3])
Xint
Hint <- Xint %*% solve(t(Xint) %*% Xint) %*% t(Xint)
Hint
B.int <- solve(t(Xint) %*% Xint) %*% t(Xint) %*% Y
B.int
Yhat.int
Yhat.int <- Xint $ B.int
Yhat.int
Yhat.int <- Xint $ B.int
Yhat.int <- Xint %*% B.int
Yhat.int
# Residuals
e.int <- Y - Yhat.int
e.int
Yhat.int <- Xint %*% B.int
Yhat.int
# Residuals
e.int <- Y - Yhat.int
e.int
#SSE
SSE.int <- sum((Y - Yhat.int)^2)
SSE.int
# MSE
MSE.int <- SSE.int / (5 - 4)
MSE.int

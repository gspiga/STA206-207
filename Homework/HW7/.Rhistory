# Libraries
library(MASS)
library(ggplot2)
library(plotly)
library(GGally)
cars <- read.csv("Cars.csv")
cars
# Fixing horsepower column
cars$horsepower <- as.numeric(cars$horsepower)
# Find index of NA rows
NArows <- which(is.na(cars))
# View rows
cars[NArows,]
str(cars)
cars$cylinders <- as.factor(cars$cylinders)
cars$country.code <- as.factor(cars$country.code)
# MPG
ggplot(data = cars, aes(x = mpg)) + geom_histogram(bins = 15)
#Displacement
ggplot(data = cars, aes(x = displacement)) + geom_histogram(bins = 10)
# Horsepower
ggplot(data = cars, aes(x = horsepower))+ geom_histogram(bins = 20)
# Weight
ggplot(data = cars, aes(x = weight)) + geom_histogram()
# Acceleration
ggplot(data = cars, aes(x = acceleration)) + geom_histogram()
ggpairs(cars[,c(1, 3, 4, 5, 6)], title = "Correlogram of Cars Data")
library(plotly)
fig1 <-
plot_ly(
data = data.frame(table(cars$cylinders)),
labels = ~ Var1,
values = ~ Freq,
type = 'pie'
)
fig1 <-
fig1 %>% layout(
title = "Number of Cylinders",
xaxis = list(
showgrid = FALSE,
zeroline = FALSE,
showticklabels = FALSE
),
yaxis = list(
showgrid = FALSE,
zeroline = FALSE,
showticklabels = FALSE
)
)
fig1
fig2 <-
plot_ly(
data = data.frame(table(cars$country.code)),
labels = ~ Var1,
values = ~ Freq,
type = 'pie'
)
fig2 <-
fig2 %>% layout(
title = "Pie Chart of Country Code",
xaxis = list(
showgrid = FALSE,
zeroline = FALSE,
showticklabels = FALSE
),
yaxis = list(
showgrid = FALSE,
zeroline = FALSE,
showticklabels = FALSE
)
)
fig2
ggplot(data = cars, aes(x = cylinders, y = mpg, fill = country.code)) + geom_boxplot()
ggplot(data = cars, aes(x = mpg)) + geom_histogram()
boxcox(mpg ~ cylinders + weight + horsepower + weight, data = cars)
ggplot(data = cars, aes(x = mpg)) + geom_histogram(bins = 20)
ggplot(data = cars, aes(x = log(mpg)) + geom_histogram(bins = 20)
ggplot(data = cars, aes(x = mpg) + geom_histogram(bins = 20)
ggplot(data = cars, aes(x = mpg)) + geom_histogram(bins = 20)
boxcox(mpg ~ cylinders + weight + horsepower + weight, data = cars)
lm(mpg ~ cylinders + weight + horsepower + weight)
View(cars)
lm(mpg ~ cylinders + weight + horsepower + weight, data = cars)
cars.Model <- lm(mpg ~ cylinders + weight + horsepower + weight, data = cars)
summary(cars.Model)
cars.Model <- lm(mpg ~ cylinders + horsepower + weight, data = cars)
summary(cars.Model)
boxcox(mpg ~ cylinders + horsepower + weight, data = cars)
summary(cars.Model)
cars.Model <- lm(mpg ~ cylinders + horsepower + weight, data = cars)
summary(cars.Model)
ggplot(data = cars, aes(x = mpg)) + geom_histogram(bins = 20)
cars.Model <- lm(mpg ~ cylinders + horsepower + weight, data = cars)
boxcox(cars.Model)
ggplot(data = cars, aes(x = mpg)) + geom_histogram(bins = 20)
cars.Model <- lm(mpg ~ cylinders + horsepower + weight, data = cars)
bc <- boxcox(cars.Model)
bc
plot(bc)
# Find best lambda
bc <- boxcox(cars.Model)
lambda <- bc$x[which.max(bc$y)]
# make new data column
cars$mpgTrans <- (cars$mpg^lambda - 1)/ lambda
bc <- boxcox(cars.Model)
ggplot(data = cars, aes(x = mpg)) + geom_histogram(bins = 20)
cars.Model <- lm(mpg ~ cylinders + horsepower + weight, data = cars)
bc <- boxcox(cars.Model)
# Find best lambda
lambda <- bc$x[which.max(bc$y)]
# make new data column
cars$mpgTrans <- (cars$mpg^lambda - 1)/ lambda
cars.Model.T <- lm(mpgTrans ~ cylinders + horsepower + weight, data = cars)
summary(cars.Model.T)
lambda
levels(cars$cylinders)
cars.Model.Int <- lm(mpgTrans ~ cylinders + horsepower + weight + cylinders*horsepower + cylinders*weight, data = cars)
summary(cars.Model.Int)
summary(cars.Model.Int)
cars.Model.Int <- lm(mpgTrans ~ cylinders + horsepower + weight + cylinders*horsepower + cylinders*weight, data = cars)
summary(cars.Model.Int)
anova(cars.Model.T, cars.Model.Int)
anova(cars.Model.Int, cars.Model.T)
# For non interaction model
predict(cars.Model.T, data.frame(cylinders4 = 1, cylinders5 = 0, cylinders6 = 0, cyinders8 =0,  horsepower = 100, weight = 3000), interval = "prediction", level = 0.95)
# For non interaction model
predict(cars.Model.T, data.frame(cylinders = 4, horsepower = 100, weight = 3000), interval = "prediction", level = 0.95)
# For non interaction model
predict(cars.Model.T, data.frame(cylinders = as.factor(4), horsepower = 100, weight = 3000), interval = "prediction", level = 0.95)
# For non interaction model
predict(cars.Model.T, data.frame(cylinders = "4", horsepower = 100, weight = 3000), interval = "prediction", level = 0.95)
# With interaction model
predict(cars.Model.Int, data.frame(cylinders = "4", horsepower = 100, weight = 3000), interval = "prediction", level = 0.95)
library(survival)
library(KMsurv)
library(ggplot2)
library(ggpubr)
library(survminer)
library(plotly)
library(muhaz)
vars <- c("id", "clinic", "status", "time", "prison", "methadone")
addicts <-
read.table(
url(
"https://dmrocke.ucdavis.edu/Class/BST222.2022.Fall/addicts.txt"
),
header = F,
col.names = vars
)
#addicts
#change variables to factors to be used in Cox PH
addicts$clinic <- factor(addicts$clinic,labels=c("Clinic1","Clinic2"))
addicts$prison <- factor(addicts$prison,labels=c("No","Yes"))
head(addicts)
surv_object <- Surv(time = addicts$time, event = addicts$status)
KMcurves <- survfit(surv_object ~ clinic, data = addicts)
KMplot <- ggsurvplot(KMcurves) + labs(title = "Tenure in the Clinic")
ggplotly(KMplot[[1]])
survdiff(surv_object ~ clinic, data = addicts)
NAcurves <-
survfit(surv_object ~ clinic, type = "fleming-harrington", data = addicts)
#Cumulative Hazard plot
cumHazPlot <-
ggsurvplot(
NAcurves,
fun = "cumhaz",
palette = c("#581845", "#FFC300"),
ggtheme = theme_light()
) + ggtitle("Cumulative Hazard for Two Clinics")
ggplotly(cumHazPlot[[1]])
# Complimentary log-log survival plot
cumHazPlot <-
ggsurvplot(
NAcurves,
fun = "cloglog",
palette = c("#581845", "#FFC300"),
ggtheme = theme_light()
) + ggtitle("Complimentary Log-Log for Two Clinics")
ggplotly(cumHazPlot[[1]])
# Clinic is already a factor
class(addicts$clinic)
# Building a Cox Model
addicts.cox <- coxph(surv_object ~ clinic, data = addicts)
summary(addicts.cox)
addicts.cox2 <- coxph(surv_object ~ clinic + prison + methadone, data = addicts)
summary(addicts.cox2)
addicts.cox3 <- coxph(surv_object ~ factor(clinic), data = addicts)
summary(addicts.cox3)
KMcurves <- survfit(surv_object ~ factor(clinic), data = addicts)
covariates <- data.frame(clinic = c("Clinic1", "Clinic2"), prison = "No", methadone = "65")
# CoxPH <- survfit(addicts.cox3, data.frame(clinic = c("Clinic1", "Clinic2")), conf.int = F)
CoxPH <- survfit(addicts.cox3, covariates, conf.int = F)
fit <- list(CoxPH = CoxPH, KapMei = KMcurves)
compPlot <-
ggsurvplot_combine(fit, data = addicts) + labs(title = "Comparison of Cox PH Curves to Kaplan-Meier with No Prison and Methadone at 65")
ggplotly(compPlot[[1]])
cars
cars
ggplot(data = cars, aes(x = mpg)) + geom_histogram(bins = 20)
#
cars.Model <- lm(mpg ~ cylinders + horsepower + weight, data = cars)
summary(cars.Model)
#
bc <- boxcox(cars.Model)
lambda <- bc$x[which.max(bc$y)]
lambda
cars$mpgTrans <- (cars$mpg^lambda - 1) / lambda
summary(mpgTrans ~ cylinders + horsepower + weight, data = cars)
summary(mpgTrans ~ cylinders + horsepower + weight, data = cars)
summary(lm(mpgTrans ~ cylinders + horsepower + weight, data = cars))
summary(cars.Model)
summary(lm(mpgTrans ~ cylinders + horsepower + weight, data = cars))
### c.)
## Question 2
```{r, message = F}
# Libraries
library(MASS)
library(ggplot2)
library(plotly)
library(GGally)

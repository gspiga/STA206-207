for (i in 1:1000) {
set.seed(i + 100)
xOpt <- rnorm(100, sd = 5)
yOpt <- myNormDist + w
B1opt <- sum((xOpt - mean(xOpt)) * (yOpt - mean(yOpt))) / sum((yOpt - mean(yOpt))^2)
B0opt <-mean(yOpt) - B1opt * mean(xOpt)
YpredOpt <- B0opt + B1opt * xOpt
MSEopt <- sum((Yopt - YpredOpt)^2) / n - 2
dfOpt <- rbind(dfOpt, c(B0opt, B1opt, MSEopt))
}
dfOpt <- data.frame(matrix(ncol = 3, nrow = 0))
names(dfOpt) <- c("Beta0", "Beta1", "MSE")
for (i in 1:1000) {
set.seed(i + 100)
xOpt <- rnorm(100, sd = 5)
yOpt <- myNormDist + w
B1opt <- sum((xOpt - mean(xOpt)) * (yOpt - mean(yOpt))) / sum((yOpt - mean(yOpt))^2)
B0opt <-mean(yOpt) - B1opt * mean(xOpt)
YpredOpt <- B0opt + B1opt * xOpt
MSEopt <- sum((yOpt - YpredOpt)^2) / n - 2
dfOpt <- rbind(dfOpt, c(B0opt, B1opt, MSEopt))
}
dfOpt <- data.frame(matrix(ncol = 3, nrow = 0))
names(dfOpt) <- c("Beta0", "Beta1", "MSE")
for (i in 1:1000) {
set.seed(i + 100)
xOpt <- rnorm(100, sd = 5)
yOpt <- myNormDist + w
B1opt <- sum((xOpt - mean(xOpt)) * (yOpt - mean(yOpt))) / sum((yOpt - mean(yOpt))^2)
B0opt <-mean(yOpt) - B1opt * mean(xOpt)
YpredOpt <- B0opt + B1opt * xOpt
MSEopt <- sum((yOpt - YpredOpt)^2) / nrow(xOpt) - 2
dfOpt <- rbind(dfOpt, c(B0opt, B1opt, MSEopt))
}
dfOpt
names(dfOpt) <- c("Beta0", "Beta1", "MSE")
dfOpt <- data.frame(matrix(ncol = 3, nrow = 0))
names(dfOpt) <- c("Beta0", "Beta1", "MSE")
for (i in 1:1000) {
set.seed(i + 100)
xOpt <- rnorm(100, sd = 5)
yOpt <- myNormDist + w
B1opt <- sum((xOpt - mean(xOpt)) * (yOpt - mean(yOpt))) / sum((yOpt - mean(yOpt))^2)
B0opt <-mean(yOpt) - B1opt * mean(xOpt)
YpredOpt <- B0opt + B1opt * xOpt
MSEopt <- sum((yOpt - YpredOpt)^2) / nrow(xOpt) - 2
dfOpt <- cbind(dfOpt, c(B0opt, B1opt, MSEopt))
}
dfOpt <- data.frame(matrix(ncol = 3, nrow = 0))
names(dfOpt) <- c("Beta0", "Beta1", "MSE")
for (i in 1:1000) {
set.seed(i + 100)
xOpt <- rnorm(100, sd = 5)
yOpt <- myNormDist + w
B1opt <- sum((xOpt - mean(xOpt)) * (yOpt - mean(yOpt))) / sum((yOpt - mean(yOpt))^2)
B0opt <-mean(yOpt) - B1opt * mean(xOpt)
YpredOpt <- B0opt + B1opt * xOpt
MSEopt <- sum((yOpt - YpredOpt)^2) / nrow(xOpt) - 2
dfOpt <- rbind(dfOpt, c(B0opt, B1opt, MSEopt))
}
dfOpt
dfOpt <- data.frame(matrix(ncol = 3, nrow = 0))
names(dfOpt) <- c("Beta0", "Beta1", "MSE")
for (i in 1:1000) {
set.seed(i + 100)
xOpt <- rnorm(100, sd = 5)
yOpt <- myNormDist + w
B1opt <- sum((xOpt - mean(xOpt)) * (yOpt - mean(yOpt))) / sum((yOpt - mean(yOpt))^2)
B0opt <-mean(yOpt) - B1opt * mean(xOpt)
YpredOpt <- B0opt + B1opt * xOpt
MSEopt <- sum((yOpt - YpredOpt)^2) / nrow(xOpt) - 2
#dfOpt <- rbind(dfOpt, c(B0opt, B1opt, MSEopt))
dfOpt[i,] <- c(B0opt, B1opt, MSEopt)
}
dfOpt <- data.frame(matrix(ncol = 3, nrow = 0))
names(dfOpt) <- c("Beta0", "Beta1", "MSE")
dfOpt <- data.frame(matrix(ncol = 3, nrow = 0))
names(dfOpt) <- c("Beta0", "Beta1", "MSE")
for (i in 1:1000) {
set.seed(i + 100)
xOpt <- rnorm(100, sd = 5)
yOpt <- myNormDist + w
B1opt <- sum((xOpt - mean(xOpt)) * (yOpt - mean(yOpt))) / sum((yOpt - mean(yOpt))^2)
B0opt <-mean(yOpt) - B1opt * mean(xOpt)
YpredOpt <- B0opt + B1opt * xOpt
MSEopt <- sum((yOpt - YpredOpt)^2) / nrow(xOpt) - 2
#dfOpt <- rbind(dfOpt, c(B0opt, B1opt, MSEopt))
dfOpt[i,] <- c(B0opt, B1opt, MSEopt)
}
dfOpt
colnames(dfOpt) <- c("Beta0", "Beta1", "MSE")
dfOpt <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(dfOpt) <- c("Beta0", "Beta1", "MSE")
for (i in 1:1000) {
set.seed(i + 100)
xOpt <- rnorm(100, sd = 5)
yOpt <- myNormDist + w
B1opt <- sum((xOpt - mean(xOpt)) * (yOpt - mean(yOpt))) / sum((yOpt - mean(yOpt))^2)
B0opt <-mean(yOpt) - B1opt * mean(xOpt)
YpredOpt <- B0opt + B1opt * xOpt
MSEopt <- sum((yOpt - YpredOpt)^2) / nrow(xOpt) - 2
#dfOpt <- rbind(dfOpt, c(B0opt, B1opt, MSEopt))
dfOpt[i,] <- c(B0opt, B1opt, MSEopt)
}
dfOpt
MSEopt
sum((yOpt - YpredOpt)^2)
nrow(xOpt) - 2
xOpt
length(xOpt)
dfOpt <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(dfOpt) <- c("Beta0", "Beta1", "MSE")
for (i in 1:1000) {
set.seed(i + 100)
xOpt <- rnorm(100, sd = 5)
yOpt <- myNormDist + w
B1opt <- sum((xOpt - mean(xOpt)) * (yOpt - mean(yOpt))) / sum((yOpt - mean(yOpt))^2)
B0opt <-mean(yOpt) - B1opt * mean(xOpt)
YpredOpt <- B0opt + B1opt * xOpt
MSEopt <- sum((yOpt - YpredOpt)^2) / length(xOpt) - 2
#dfOpt <- rbind(dfOpt, c(B0opt, B1opt, MSEopt))
dfOpt[i,] <- c(B0opt, B1opt, MSEopt)
}
dfOpt
dfOpt <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(dfOpt) <- c("Beta0", "Beta1", "MSE")
for (i in 1:1000) {
set.seed(i + 100)
xOpt <- rnorm(100, sd = 5)
yOpt <- myNormDist + w
B1opt <- sum((xOpt - mean(xOpt)) * (yOpt - mean(yOpt))) / sum((yOpt - mean(yOpt))^2)
B0opt <-mean(yOpt) - B1opt * mean(xOpt)
YpredOpt <- B0opt + B1opt * xOpt
MSEopt <- sum((yOpt - YpredOpt)^2) / length(xOpt) - 2
#dfOpt <- rbind(dfOpt, c(B0opt, B1opt, MSEopt))
dfOpt[i,] <- c(B0opt, B1opt, MSEopt)
}
head(dfOpt)
ggplot(data = dfOpt, aes(x = Beta0)) + geom_histogram()
x <- seq(1, 100)
x
w <- 2 + 0.5*x
w
set.seed(123)
myNormDist <- rnorm(100, sd = 5)
cat("The mean is ", mean(myNormDist), "\n")
cat("The standard deviation is ", sd(myNormDist), "\n")
library(ggplot2)
library(plotly)
Norm.df <- data.frame(myNormDist)
ggplotly(ggplot(data = Norm.df, aes(x = myNormDist)) + geom_histogram(bins = 15, fill = "#8a5789"))
y <- myNormDist + w
y
Norm.df["y"] <- y
names(Norm.df) <- c("x", "y")
head(Norm.df)
# Base size for labels is 11
# https://ggplot2.tidyverse.org/reference/ggtheme.html
ggplotly(ggplot(data = Norm.df, aes(x = x, y = y)) +
geom_point(color = "#7eb6ff") +
ggtitle("Y Versus X") +
theme_grey(base_size = 11*1.5))
Beta1 <-
sum((Norm.df[, 1] - mean(Norm.df[, 1])) * (Norm.df[, 2] - mean(Norm.df[, 2]))) / sum((Norm.df[, 1] - mean(Norm.df[, 1])) ^2)
Beta0 <- mean(Norm.df[,2]) - Beta1 * mean(Norm.df[, 1])
# Create column for predictions
Norm.df["Ypred"] <- Beta0 + Beta1 * Norm.df["x"]
ggplotly(ggplot(data = Norm.df, aes(x = x, y = y)) +
geom_point(color = "#7eb6ff") +
geom_line(data = Norm.df, aes(x = x, y = Ypred)) +
ggtitle("Y Versus X") +
theme_grey(base_size = 11*1.5))
Norm.df["ei"] <- Norm.df["y"] - Norm.df["Ypred"]
ggplotly(ggplot(data = Norm.df, aes(x = x, y = ei)) +
geom_point(color = "#75a876") +
ggtitle("Residuals Versus X") +
theme_grey(base_size = 11*1.5))
cat("The MSE is", sum(Norm.df["ei"]^2) / (nrow(Norm.df) - 2))
figList <- c()
plotList <- list()
for (i in seq(1,5)) {
set.seed(i)
xLoop <- rnorm(100, sd = 5)
yLoop <- myNormDist + w
Beta1Loop <-
sum((xLoop - mean(xLoop)) * (yLoop - mean(yLoop))) / sum((xLoop - mean(xLoop))^2)
Beta0Loop <- mean(yLoop) - Beta1 * mean(xLoop)
Loop.df <- data.frame(xLoop, yLoop, Beta0Loop + Beta1Loop * xLoop)
names(Loop.df) <- c("x", "y", "Ypred")
p <- ggplotly(ggplot(data = Loop.df, aes(x = x, y = y)) +
geom_point(color = "#7eb6ff") +
geom_line(data = Loop.df, aes(x = x, y = Ypred)) +
ggtitle("Y Versus X") +
theme_grey(base_size = 11*1.5))
plotList[[i]] <- p
#figList <- c(figList, Loop.df)
}
plotList[1]
for (i in 1:5) {
print(plotList[[i]])
}
dfOpt <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(dfOpt) <- c("Beta0", "Beta1", "MSE")
for (i in 1:1000) {
set.seed(i + 100)
xOpt <- rnorm(100, sd = 5)
yOpt <- myNormDist + w
B1opt <- sum((xOpt - mean(xOpt)) * (yOpt - mean(yOpt))) / sum((yOpt - mean(yOpt))^2)
B0opt <-mean(yOpt) - B1opt * mean(xOpt)
YpredOpt <- B0opt + B1opt * xOpt
MSEopt <- sum((yOpt - YpredOpt)^2) / length(xOpt) - 2
#dfOpt <- rbind(dfOpt, c(B0opt, B1opt, MSEopt))
dfOpt[i,] <- c(B0opt, B1opt, MSEopt)
}
head(dfOpt)
ggplot(data = dfOpt, aes(x = Beta0)) + geom_histogram()
ggplot(data = dfOpt, aes(x = Beta0)) + geom_histogram(color = "#4b0082")
ggplot(data = dfOpt, aes(x = Beta0)) + geom_histogram(fill = "#4b0082")
ggplotly(ggplot(data = dfOpt, aes(x = Beta0)) + geom_histogram(fill = "#4b0082"))
ggplotly(ggplot(data = dfOpt, aes(x = Beta0)) + geom_histogram(fill = "#4b0082"))
cat("The mean of Beta0 is", mean(dfOpt[,1]), "and the variance is ", var(dfOpt[,1]))
ggplotly(ggplot(data = dfOpt, aes(x = Beta0)) + geom_histogram(fill = "#4b0082"))
cat("The mean of Beta0 is", mean(dfOpt[,1]), "and the variance is", var(dfOpt[,1]), ".")
ggplotly(ggplot(data = dfOpt, aes(x = Beta1)) + geom_histogram(fill = "#00824b"))
cat("The mean of Beta1 is", mean(dfOpt[,2]), "and the variance is", var(dfOpt[,2]), ".")
ggplotly(ggplot(data = dfOpt, aes(x = MSE)) + geom_histogram(fill = "#824b00"))
cat("The mean of MSE is", mean(dfOpt[,3]), "and the variance is", var(dfOpt[,3]), ".")
ggplotly(ggplot(data = dfOpt, aes(x = Beta0)) + geom_histogram(fill = "#4b0082"))
cat("The mean of Beta0 is", mean(dfOpt[,1]), "and the variance is", var(dfOpt[,1]), ".")
ggplotly(ggplot(data = dfOpt, aes(x = Beta1)) + geom_histogram(fill = "#00824b"))
cat("The mean of Beta1 is", mean(dfOpt[,2]), "and the variance is", var(dfOpt[,2]), ".")
ggplotly(ggplot(data = dfOpt, aes(x = MSE)) + geom_histogram(fill = "#824b00"))
cat("The mean of MSE is", mean(dfOpt[,3]), "and the variance is", var(dfOpt[,3]), ".")
set.seed(123)
myNormVec <- rnorm(100, sd = 5)
cat("The mean is ", mean(myNormVec), "\n")
cat("The standard deviation is ", sd(myNormVec), "\n")
Norm.df <- data.frame(x)
myNormDist <- as.data.frame(myNormVec)
ggplotly(ggplot(data = myNormDist, aes(x = myNormVec)) + geom_histogram(bins = 15, fill = "#8a5789"))
library(ggplot2)
library(plotly)
x <- seq(1, 100)
x
w <- 2 + 0.5 * x
w
set.seed(123)
myNormVec <- rnorm(100, sd = 5)
cat("The mean is ", mean(myNormVec), "\n")
cat("The standard deviation is ", sd(myNormVec), "\n")
Norm.df <- data.frame(x)
myNormDist <- as.data.frame(myNormVec)
ggplotly(ggplot(data = myNormDist, aes(x = myNormVec)) + geom_histogram(bins = 15, fill = "#8a5789"))
Beta1 <-
sum((Norm.df[, 1] - mean(Norm.df[, 1])) * (Norm.df[, 2] - mean(Norm.df[, 2]))) / sum((Norm.df[, 1] - mean(Norm.df[, 1])) ^2)
library(ggplot2)
library(plotly)
x <- seq(1, 100)
x
w <- 2 + 0.5 * x
w
set.seed(123)
myNormVec <- rnorm(100, sd = 5)
cat("The mean is ", mean(myNormVec), "\n")
cat("The standard deviation is ", sd(myNormVec), "\n")
Norm.df <- data.frame(x)
myNormDist <- as.data.frame(myNormVec)
ggplotly(ggplot(data = myNormDist, aes(x = myNormVec)) + geom_histogram(bins = 15, fill = "#8a5789"))
y <- myNormDist + w
head(y, 15)
Norm.df["y"] <- y
names(Norm.df) <- c("x", "y")
head(Norm.df)
# Base size for labels is 11
# https://ggplot2.tidyverse.org/reference/ggtheme.html
ggplotly(
ggplot(data = Norm.df, aes(x = x, y = y)) +
geom_point(color = "#7eb6ff") +
ggtitle("Y Versus X") +
theme_grey(base_size = 11 * 1.5)
)
Beta1 <-
sum((Norm.df[, 1] - mean(Norm.df[, 1])) * (Norm.df[, 2] - mean(Norm.df[, 2]))) / sum((Norm.df[, 1] - mean(Norm.df[, 1])) ^2)
Beta0 <- mean(Norm.df[, 2]) - Beta1 * mean(Norm.df[, 1])
# Create column for predictions
Norm.df["Ypred"] <- Beta0 + Beta1 * Norm.df["x"]
ggplotly(
ggplot(data = Norm.df, aes(x = x, y = y)) +
geom_point(color = "#7eb6ff") +
geom_line(data = Norm.df, aes(x = x, y = Ypred)) +
ggtitle("Y Versus X") +
theme_grey(base_size = 11 * 1.5)
)
Norm.df["ei"] <- Norm.df["y"] - Norm.df["Ypred"]
ggplotly(
ggplot(data = Norm.df, aes(x = x, y = ei)) +
geom_point(color = "#75a876") +
ggtitle("Residuals Versus X") +
theme_grey(base_size = 11 * 1.5)
)
cat("The MSE is", sum(Norm.df["ei"] ^ 2) / (nrow(Norm.df) - 2))
#Empty lists for plots
plotList <- list()
plotList2 <- list()
for (i in seq(1, 5)) {
set.seed(i)
xLoop <- x #rnorm(100, sd = 5)
yLoop <- rnorm(100, sd = 5) + w
Beta1Loop <-
sum((xLoop - mean(xLoop)) * (yLoop - mean(yLoop))) / sum((xLoop - mean(xLoop)) ^
2)
Beta0Loop <- mean(yLoop) - Beta1 * mean(xLoop)
Loop.df <- data.frame(xLoop, yLoop, Beta0Loop + Beta1Loop * xLoop)
names(Loop.df) <- c("x", "y", "Ypred")
#Creating residuals column
Loop.df["ei"] <- Loop.df["y"] - Loop.df["Ypred"]
#Plots for y versus x
p <- ggplotly(
ggplot(data = Loop.df, aes(x = x, y = y)) +
geom_point(color = "#7eb6ff") +
geom_line(data = Loop.df, aes(x = x, y = Ypred)) +
ggtitle("Y Versus X") +
theme_grey(base_size = 11 * 1.5)
)
plotList[[i]] <- p
#figList <- c(figList, Loop.df)
#Plots for residuals versus X
p2 <- ggplotly(
ggplot(data = Loop.df, aes(x = x, y = ei)) +
geom_point(color = "#75a876") +
ggtitle("Residuals Versus X") +
theme_grey(base_size = 11 * 1.5)
)
plotList2[[i]] <- p2
}
for (i in 1:5) {
print(plotList[[i]])
print(plotList2[[i]])
}
dfOpt <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(dfOpt) <- c("Beta0", "Beta1", "MSE")
for (i in 1:1000) {
set.seed(i + 100)
xOpt <- x #rnorm(100, sd = 5)
yOpt <- rnorm(100, sd = 5) + w
B1opt <-
sum((xOpt - mean(xOpt)) * (yOpt - mean(yOpt))) / sum((yOpt - mean(yOpt)) ^
2)
B0opt <- mean(yOpt) - B1opt * mean(xOpt)
YpredOpt <- B0opt + B1opt * xOpt
MSEopt <- sum((yOpt - YpredOpt) ^ 2) / length(xOpt) - 2
#dfOpt <- rbind(dfOpt, c(B0opt, B1opt, MSEopt))
dfOpt[i, ] <- c(B0opt, B1opt, MSEopt)
}
head(dfOpt)
ggplotly(ggplot(data = dfOpt, aes(x = Beta0)) + geom_histogram(fill = "#4b0082"))
cat("The mean of Beta0 is",
mean(dfOpt[, 1]),
"and the variance is",
var(dfOpt[, 1]),
".")
ggplotly(ggplot(data = dfOpt, aes(x = Beta1)) + geom_histogram(fill = "#00824b"))
cat("The mean of Beta1 is",
mean(dfOpt[, 2]),
"and the variance is",
var(dfOpt[, 2]),
".")
ggplotly(ggplot(data = dfOpt, aes(x = MSE)) + geom_histogram(fill = "#824b00"))
cat("The mean of MSE is",
mean(dfOpt[, 3]),
"and the variance is",
var(dfOpt[, 3]),
".")
setwd("~/Github/STA206/Homework/HW2")
n <- 84
Xi <- 6602
Yi <- 597341
Xi2 <- 522098
Yi2 <- 4796548849
XiYi <- 46400230
Xbar <- Xi/n
Ybar <- Yi /n
Beta1 <- XiYi - (n*)
n <- 84
Xi <- 6602
Yi <- 597341
Xi2 <- 522098
Yi2 <- 4796548849
XiYi <- 46400230
Xbar <- Xi/n
Ybar <- Yi /n
Beta1 <- (XiYi - (n*Xbar*Ybar)) / (Xi2 - n*Xbar)
Beta1
n <- 84
Xi <- 6602
Yi <- 597341
Xi2 <- 522098
Yi2 <- 4796548849
XiYi <- 46400230
Xbar <- Xi/n
Ybar <- Yi /n
Beta1 <- (XiYi - (n*Xbar*Ybar)) / (Xi2 - n*Xbar)
Beta1
n <- 84
Xi <- 6602
Yi <- 597341
Xi2 <- 522098
Yi2 <- 4796548849
XiYi <- 46400230
Xbar <- Xi/n
Ybar <- Yi /n
Beta1 <- (XiYi - (n*Xbar*Ybar)) / (Xi2 - n*(Xbar)^2)
Beta1
n <- 84
Xi <- 6602
Yi <- 597341
Xi2 <- 522098
Yi2 <- 4796548849
XiYi <- 46400230
Xbar <- Xi/n
Ybar <- Yi /n
Beta1 <- (XiYi - (n*Xbar*Ybar)) / (Xi2 - n*(Xbar)^2)
Beta1
Beta0 <- Ybar - Beta1*Xbar
Beta0
Beta0
Beta1
SSE <- (Yi - Beta0 + Beta1*Xi)^2
SSE
SSE <- (Yi - Beta0 + Beta1*Xi)^2
SSE
SSE <-
Yi2 - 2 * Beta0 * Yi - 2 * Beta1 * XiYi + Beta0 ^ 2 * 84 + 2 * Beta0 *
Beta1 * Xi + Beta1 ^ 2 * Xi2
SSE
SSE <-
Yi2 - 2 * Beta0 * Yi - 2 * Beta1 * XiYi + Beta0 ^ 2 * 84 + 2 * Beta0 *
Beta1 * Xi + Beta1 ^ 2 * Xi2
SSE
SSE <-
Yi2 - 2 * Beta0 * Yi - 2 * Beta1 * XiYi + Beta0 ^ 2 * 84 + 2 * Beta0 *
Beta1 * Xi + Beta1 ^ 2 * Xi2
SSE
MSE <- SSE / (84 - 2)
MSE
Xbar^2
seBeta0 <- sqrt(MSE * ((1/n) + (Xbar^2/(Xi2 - n*(Xbar)^2))))
seBeta0
seBeta1 <- sqrt(MSE / ((Xi2 - n*(Xbar)^2)))
seBeta1
Tstar
Tstar <-  Beta1 / seBeta1
Tstar
qt(1 - 0.01/2)
qt(1 - 0.01/2, n - 2)
?qt
Tstar
pt(Tstar, n -2)
(1 - 0.01/2, n - 2)
# We test for Beta 1
Tstar <-  Beta1 / seBeta1
Tstar
qt(1 - 0.01/2, n - 2)
pt(Tstar, n -2)
pt(Tstar, df=  n -2)
# We test for Beta 1
Tstar <-  Beta1 / seBeta1
Tstar
critval <- qt(1 - 0.01/2, n - 2)
critval
pval <-pt(Tstar, n -2)
pval
# We test for Beta 1
Tstar <-  Beta1 / seBeta1
Tstar
critval <- qt(1 - 0.01/2, n - 2)
critval
pval <-pt(Tstar, n -2)
pval
# We test for Beta 1
Tstar <-  Beta1 / seBeta1
Tstar
critval <- qt(1 - (0.01/2), n - 2)
critval
pval <-pt(Tstar, n -2)
pval
#We create a confidence interval for Beta0
c(Beta0 - qt(1 - 0.01/2, n-2,) * seBeta0, Beta0 + qt(1 - 0.01/2, n-2,) * seBeta0)
SSE <-
Yi2 - 2 * Beta0 * Yi - 2 * Beta1 * XiYi + Beta0 ^ 2 * 84 + 2 * Beta0 *
Beta1 * Xi + Beta1 ^ 2 * Xi2
SSE
MSE <- SSE / (84 - 2)
MSE
# Standard Error of Beta0
seBeta0 <- sqrt(MSE * ((1/n) + (Xbar^2/(Xi2 - n*(Xbar)^2))))
seBeta0
# Standard Error of Beta1
seBeta1 <- sqrt(MSE / ((Xi2 - n*(Xbar)^2)))
seBeta1
n <- 84
Xi <- 6602
Yi <- 597341
Xi2 <- 522098
Yi2 <- 4796548849
XiYi <- 46400230
Xbar <- Xi/n
Ybar <- Yi /n
Beta1 <- (XiYi - (n*Xbar*Ybar)) / (Xi2 - n*(Xbar)^2)
Beta1
Beta0 <- Ybar - Beta1*Xbar
Beta0
